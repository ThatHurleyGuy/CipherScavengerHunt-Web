<h1>Guide to the Competition</h1>

<p>
	This competition will involve you decoding 3 different forms of messages. Each team will have a secret message (or 2) of their choosing. After solving the levels of encoding, you will be tasked with trying to talk to each other team and scanning their message using the application. Each team will be randomly given one of the 3 encodings for their message by the website. Level 1 encoding is worth 1 point, level 2 is worth 2, and level 3 is worth 3. And each time someone scans your team's qr code you get an extra point! So talk to as many teams as possible to see if you can be at the top of the scoreboard!
</p>

<div class="alert">
  <h3>Project day 2 update</h3>
  <ol>
    <li>Note that there has been a new project posted <%= link_to "Here", "cipher-hunt-android.zip" %>. It changes the api reuirements for the project. This is due to the limited size of the virtualbox disk. For those of you who installed eclipse on your own machines, *high fives* this doesn't matter.</li>
    <li>Another tip for people using virtualbox, if you are having trouble getting the virtual machine to recognize the phone while it's plugged in. You made need to follow <%= link_to "these steps.", "http://forum.xda-developers.com/showthread.php?t=570452" %></li>
    <li>For people who are still having compiler errors (Lots of red in eclipse), did you follow the last part of the original step 2 below? Make sure you have the proper api levels installed!</li>
  </ol>
</div>

<ol>
<li>First off, on this website click on the "New Team" option. Select one of your team members to be the "Captain" and use his/her netid. Choose a team name, and 2 secret messages. These messages should be short, just one plain text english sentences with no foreign characters. After successfully creating your team, you will see a screen with a 4 digit pin, be sure to copy this pin down. Your team should now show up on the leaderboard!</li>
<li>Install Eclipse and Android. See the <a href="http://courses.engr.illinois.edu/cs125/files/vb/">CS125 page</a> for details. Note that you won't need subversion for this project. Also you will need to be sure that android api version 8 is installed for this project.</li>
<li>Download the project <%= link_to "Here", "cipher-hunt-android.zip" %>. In Eclipse Right Click in the project list area -> Import -> "Existing Projects into Workspace". Select Archive File and browse to the actual .zip of the project.</li>
<li>Install the app onto the phone. To do this, ensure that the phone is plugged into the machine and has USB debugging turned on (<a href="http://developer.android.com/tools/device.html#setting-up">See step 2</a>). Right click on the project name in eclipse and Run as -> Android Application.</li>
<li>On first launch the application should take you to the preferences screen. Enter the captain's netid, and also the 4 digit pin you copied down earlier. If you lost the pin, you should be able to recover it <%= link_to "Here", "forgotpin" %>. You can now go back and by selecting "View Your Message" it should take you to a screen that shows a QR code. If it says there is a 401 Error, then something has gone wrong with your authentication, so verify that you entered the netid and pin properly.</li>
<li>The file containing the methods you will be implementing is called "Decoder.java", it appears under the root package named "com" (Note that normally this file would go within the packages under a different folder like the "ui" files do, but we have left it here to be easier to find. If you would like to know why a different package structure would normally be used, ask your ELA). The level 1 encoding is relatively straight forward. You are given one String that is currently in the encoded form, you have to decode it. Here are some example messages:
	<table class="table table-striped table-bordered">
  		<tr>
    		<th>Encoded</th>
    		<th>Decoded</th>
  		</tr>
  		<tr>
			<th>T.h.i.s. .i.s. .a. .t.e.s.t. .m.e.s.s.a.g.e.</th>
			<th>This is a test message</th>
  		</tr>
  		<tr>
			<th>B.e.w.a.r.e. .o.f. .p.e.r.i.o.d.s...</th>
			<th>Beware of periods.</th>
  		</tr>
  		<tr>
			<th>Y.a.y. .C.o.m.p.u.t.e.r. .S.c.i.e.n.c.e.!.</th>
			<th>Yay Computer Science!</th>
  		</tr>
  	</table>
  	<%= image_tag(@level1_qr) %><br/>

Note that the QR codes you see on this page are test messages, you can scan these to see if the application is working. Functions that might be helpful: <%= link_to "charAt", "http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#charAt(int)" %></li>
<li>Level 2 encoding will be more complicated. With level 1 you could easily see a pattern, but it won't be so easy for this level. Here are a few examples:
	<table class="table table-striped table-bordered">
  		<tr>
    		<th>Encoded</th>
    		<th>Decoded</th>
  		</tr>
  		<tr>
			<th>VGhpcyBpcyBhIHRlc3QgbWVzc2FnZQ==</th>
			<th>This is a test message</th>
  		</tr>
  		<tr>
			<th>WWF5IENvbXB1dGVyIFNjaWVuY2Uh</th>
			<th>Beware of periods.</th>
  		</tr>
  	</table></li>

As you can see, it looks like complete gibberish! But actually this is encoded in a manner that is very useful in the world of networking. As you may know, computers represent everything in bits. So to represent a String, which is just a sequence of characters, we use <%= link_to "ASCII", "http://www.asciitable.com/" %>. This gives us a way represent the strings easily as bits. What we have done to encode this string, is translate it into a radix-64 representation. Base64 encoding is extremely useful in taking any arbitrary data, and being able to represent it as a string. Base64 encoding is generally used to encode any arbitrary bytes of data, so after decoding it, you will need to construct the actual string from the byte you get back. Read more about Base64 encoding <%= link_to "Here", "http://en.wikipedia.org/wiki/Base64" %>. Since we have given you a string encoded in this form, you will just need to take that string and Base64 decode it. Android is nice enough to provide functionality to do this for you! Can you find the functions to help you within the <%= link_to "android documentation", "http://developer.android.com/reference/packages.html" %>? A great deal of time developing and learning new things will be spent reading documentation such as this, so it's a good idea to learn how to navigate through it! Functions that might be helpful (Other than the Base64 function, you have to find that): <%= link_to "String Constructor for byte array", "http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#String(byte[])" %>, also this is a neat tool <%= link_to "http://home.paulschou.net/tools/xlate/", "http://home.paulschou.net/tools/xlate/" %>.
  	<%= image_tag(@level2_qr) %><br/>
</li>
<li>Level 3 encoding is the most difficult, but also the coolest. To just about everyone who deals with computers, losing data is a nightmare. Because of this there are many methods of backing up data. One of the most common methods of saving data is using redundancy. The idea of redundancy is that you duplicate the data, so that if you should lose the original data, you can restore it using the redundant copy. So one way to do it is just mirror all of the data on another drive. But doesn't this seem a little wasteful? To store 1TB of data you have to spend double the money just to make sure that you can restore the data. Because of this waste, people have spent a lot of time developing cool systems that can save redundant information, without having to just directly mirror it. Thus, <%= link_to "RAID 5", "http://en.wikipedia.org/wiki/RAID_5#RAID_5" %> was born. RAID 5 takes advantage of an extremely powerful, yet very simple operation in computing, <%= link_to "XOR", "http://en.wikipedia.org/wiki/Exclusive_or" %>. XOR is a logical bitwise operation that results in a true value if and only if exactly on of the input values was true. You can read more about it on the wiki page. What this allows RAID5 to do, is XOR the data across several drives, and save the result as the redundant data. Now, if one of the drives fails, RAID can look at the redundant data, compare it to the data that is still alive, and determine what was on the lost drive. It does this because using the XOR of the previous data you can determine what should have gone in the missing spot. Rather than having this document explain the inner workings of RAID, feel free to read elsewhere about RAID - <%= link_to "http://www.scottklarr.com/topic/23/how-raid-5-really-works/", "http://www.scottklarr.com/topic/23/how-raid-5-really-works/" %>, <%= link_to "http://blog.open-e.com/how-does-raid-5-work", "http://blog.open-e.com/how-does-raid-5-work" %>. For this decode function, we will give you one string which will be a normal message, and another string which is the Base64 represenation of the parity data. This parity data is calculated by taking the 2 original messages, and XORing them character by character. Since the parity string is in Base64, you will first need to decode it, and then use that string and the given string to XOR them character by character and append them to a new string. By doing this you will reproduce the original message! Here are a few examples:
	<table class="table table-striped table-bordered">
  		<tr>
    		<th>Message 1</th>
    		<th>Parity</th>
    		<th>Message2</th>
  		</tr>
  		<tr>
			<th>Woah a QR code on a phone</th>
			<th>Dg4YSGMOTSEnVAYdRDZDBgtOAkVRaG9uZQ==</th>
			<th>Yay Computer Science!</th>
  		</tr>
  		<tr>
			<th>This is a test message</th>
			<th>Bx0NF0UHH1lBVBwAAREABBZTEkEJAHcgbWVzc2FnZSBmcm9tIG5vIHdoZXJl</th>
			<th>Suddenly there is a new message from no where</th>
  		</tr>
  		<tr>
			<th>c</th>
			<th>EA==</th>
			<th>s</th>
  		</tr>
  	</table>
See if you can workout that last simple example by hand, the tool linked for level 2 will be helpful.<br/>

  	<%= image_tag(@level3_qr) %><br/>

</li>
<li>After you have completed the levels, you can use the the app the show your QR message to other teams and have them scan it using this app. As we said above, the more teams you trade with, the more points you earn!</li>
</ol>